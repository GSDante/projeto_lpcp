-- Programa-Exemplo:

program main

{
   int x ;
   x = 1;
   if(x > 0){print "ok!"}
}

-- Regras Léxicas (ERs - Tokens correspondentes):

  $white+                                -- ignore espaços
  "--".*                                 -- ignore comentários
  program                                -- Program
  "{"                                    -- Begin
  "}"                                    -- End
  ";"                                    -- SemiColon
  int                                    -- Type s
  =                                      -- Assign
  (					 -- BeginParenthesis
  )					 -- EndParenthesis
  if                                     -- If
  else                                   -- Else
  print					 -- Print
  >                                      -- Greater
  <                   			 -- Less
  >=                                     -- Greater or equal
  <=                                     -- Less or equal
  ==                                     -- Equal
  != 					 -- Diff
  +					 -- Sum
  $digit+                                -- Int (read s) 
  $alpha [$alpha $digit \_ \']*          -- Id s 
  \" $alpha [$alpha $digit ! \_ \']* \"  -- String s

-- Resultado do "analisador léxico":

[Program,Id "main",Begin,Type,Id "x",SemiColon, Id "x",Assign,Int 1,SemiColon,If,BeginParenthesis, Id "x",Greater,Int 0,Begin,Print,String "\"ok!\"",End,End]

{
module Main (main) where
}

%wrapper "basic"

$digit = 0-9      -- digits
$alpha = [a-zA-Z]   -- alphabetic characters

tokens :-

  $white+                                ;
  "--".*                                 ;
  program                                { \s -> Program }
  "{"                                    { \s -> Begin}
  "}"                                    { \s -> End}
  ";"                                    { \s -> SemiColon}
  ","                                    { \s -> Colon}
  int                                    { \s -> Type s}
  float                                  { \s -> Type s}
  bool                                   { \s -> Type s}
  string                                 { \s -> Type s}
  =                                      { \s -> Assign}
  "("				                             { \s -> BeginParenthesis}
  ")"				                             { \s -> EndParenthesis}
  "["                                    { \s -> BeginIndex}
  "]"                                    { \s -> EndIndex}
  if                                     { \s -> If}
  else                                   { \s -> Else}
  print                                  { \s -> Print}
  while                                  { \s -> While}
  func                                   { \s -> Func}
  >                                      { \s -> Greater}
  "<"                                    { \s -> Less}
  ">="                                   { \s -> GreaterOrEqual}
  "<="                                   { \s -> LessOrEqual}
  "=="                                   { \s -> Equal}
  "!="                                   { \s -> Diff}
  "+"                                    { \s -> Sum}
  "+="                                   { \s -> Increment}
  "-="                                   { \s -> Decrement}
  "*="                                   { \s -> MultEqual}
  "/="                                   { \s -> DivEqual}
  "-"                                    { \s -> Sub}
  "*"                                    { \s -> Multi}
  "%"                                    { \s -> Mod}
  "^"                                    { \s -> Pow}
  "/"                                    { \s -> Div}
  "OR"                                   { \s -> Or }
  "AND"                                   { \s -> And }
  for                                    { \s -> For}
  do                                     { \s -> Do }
  $digit+                                { \s -> Int (read s)} 
  $digit+.$digit+                        { \s -> Float (read s)}
  "True"                                 { \s -> Bool (read s) }
  "False"                                { \s -> Bool (read s) }
  $alpha+[$alpha $digit \_ \']*          { \s -> Id s }
  \" $alpha [$alpha $digit ! \_ \']* \"  { \s -> String s}
{
-- Each action has type :: String -> Token

-- The token type:
data Token =
  Program |
  Begin   |
  End     |
  BeginParenthesis |
  EndParenthesis |
  SemiColon |
  Colon |
  Assign    | 
  If  |
  Else |
  Print |
  Greater |
  BeginIndex|
  EndIndex|
  Increment |
  Decrement|
  MultEqual |
  DivEqual |
  GreaterOrEqual |
  Less|
  LessOrEqual |
  Equal |
  Diff |
  Sum |
  Sub|
  Div|
  Mod|
  Multi|
  Pow|
  Or |
  And |
  For|
  While|
  Func|
  Do |
  Type String |
  Id String |
  Array String|
  Int Int |
  Float Float|
  Bool Bool |
  String String
  deriving (Eq,Show)

main = do
  s <- getContents
  print (alexScanTokens s)
}

-- Regras sintática do Programa exemplo
<Program> -> main Begin [<Stmts>] End
<Var_Decl> -> <Id> Colon Type
<Stmts> -> <Stmt> [SemiColon <Stmts>]
<Stmt> -> <Var_Decl_List> |<Assign> | <If> | <Write> | <For> | <While> 
<Var_Decl_List> -> <Var_Decl> [SemiColon <Var_Decl_List>]
<Assign> -> <Type> Id Assign <Exp>
<Type> -> void | char | string | int | bool | matriz | array
<If> -> If <Exp> Begin <Stmts> End
<While> -> While <Exp> Begin <Stmts> End
<Write> -> Write <Exp>
<Exp> -> Id | Int | String | <Exp> Greater <Exp>
